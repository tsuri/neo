#+TITLE: Emacs Configuration
#+DESCRIPTION: An org-babel based emacs configuration I find useful
#+LANGUAGE: en
#+PROPERTY: results silent

This piece of emacs lisp is temporary only while I play with a
pre-release of Emacs 28, with and without native compilation support.

#+begin_src emacs-lisp
(message system-configuration-options)

(message system-configuration-features)

(if (functionp 'json-serialize)
  (message "Native JSON is available")
(message "Native JSON is *not* available"))

(if (and (fboundp 'native-comp-available-p)
       (native-comp-available-p))
  (message "Native compilation is available")
(message "Native complation is *not* available"))
#+end_src

* Introduction
  This is my personal Emacs configuration. This is not the first time
  I declare [[https://www.emacswiki.org/emacs/DotEmacsBankruptcy][Emacs bankrupcy]] and start over with a new emacs life.

  It is not intended to be general or beginner-friendly. If you're a
  beginner you'll probably be better off with one of the many emacs
  configurations with batteries included.

  Also, my Emacs stays on for weeks or months at a time; I'm not
  interested in reducing startup time or delaying loading of packages
  until they're first used. It simply doesn't affect me.  This is
  another motif for looking somewhere else. Distributions like
  spacemacs or doom spend quite a lot of time in making startup fast,
  you'll be appier with them.

  If you're still with me, you still probably shouldn't take this
  configuration in its entirety. Rather, cherry pick parts you find
  interesting and port them to your own configuration.

  /Abandon All Hope, Ye Who Enter Here/

  
* General
** System Configuration
** Emacs Startup
When testing changes to the Emacs configuration it is useful to
be able to restart Emacs from within Emacs. The following allows to
restart Emacs when C-x C-c (normally bound to save-buffers-kill-Emacs)
is invoked with a universal argument.

Note that when we restart Emacs, all open files and frames are
restored (courtesy of the desktop package if installed). We also retrieve the
initial command line arguments. ~restart-emacs~ doesn't do this as
there's no platform independent way for doing it. Note that
~command-line-args~ is not sufficient as many arguments are deleted
while being processed by the Emacs C code (for instance ~--debug-init~ )
I'd still think that it would be better than completely ignoring them,
but I'm not the author of the ~~restart-emacs~ package. Here I collect
arguments from the ~/proc~ file system, I only care about Linux anyhow.

#+BEGIN_SRC emacs-lisp
  (defun neo/emacs-args ()
    (with-temp-buffer
      (insert-file-contents "/proc/self/cmdline")
      (split-string (buffer-string) "\0" t)))

  (defun neo/restart-emacs-or-exit (arg)
    (interactive "P")
    (if arg
        (restart-emacs (cdr (neo/emacs-args)))
      (save-buffers-kill-emacs)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs
    :bind
    ("C-x C-c" . neo/restart-emacs-or-exit))
#+END_SRC
** Reasonable Defaults
Speaking only for myself, claro?

#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq message-log-max 10000) ; I cannot have t as my Emacs stays on forever
    (setq kill-whole-line t)
    (setq visible-bell 1)
    (setq initial-scratch-message "")
    (setq inhibit-splash-screen t)
    (setq inhibit-startup-screen t)
    (setq inhibit-startup-buffer-menu t)
    (setq use-dialog-box nil)
    (setq ring-bell-function 'ignore)
    (setq-default truncate-lines t)
    (setq custom-safe-themes t) ; not sure, I'll probaby use very few themes no need to trust 'em all
    (put 'narrow-to-region 'disabled nil)
    (tool-bar-mode -1)
    (toggle-scroll-bar -1)
    (toggle-menu-bar-mode-from-frame -1)
    (tooltip-mode -1)
    (blink-cursor-mode 0)
    (set-fringe-mode '(10 . 0))
    (fset 'yes-or-no-p 'y-or-n-p))
#+end_src

** Save Areas

Emacs (and emacs packages) tend to store lot of files in the .emacs.d directory. This wouldn't be
particularly problematic if it wasn't for the fact that my .emacs-*.d is also a git repository. It is
possible to ignore files in git, but it become annoying to have to modify .gitignore just because I
tried a new package. So we will move everything to a ~.save~ directory.

Most of this will be accomplished by the ~no-litter~ package, but we initialize here a few variables
so that the same places can be used by other packages no-litter knows nothing about.

*** Garbage
There is no such thing as garbage, just useful stuff in the wrong place.
I wan tit out of my emacs configuration.

#+begin_src emacs-lisp
  (use-package no-littering
    :init
    ;; Still debating whether these dirs should be per-distro.
    ;(setq no-littering-etc-directory (expand-file-name "~/.emacs-save.d/config"))
    ;(setq no-littering-var-directory (expand-file-name "~/.emacs-save.d/data"))
    (setq no-littering-etc-directory (neo/litter-directory "config"))
    (setq no-littering-var-directory (neo/litter-directory "data"))
    (setq custom-file (expand-file-name "custom.el" no-littering-var-directory)))
#+end_src

*** Autosave
**** Files
By default autosave files are saved in the same directory of the file
they're related to (I think the exception is that remote files are
saved in some local temporary directory). I find this annoying, so I
put them together with the other "garbage".
Autosave files are ephemeral and are deleted when a buffer is saved in
its visited file (by default, but I don't see a reason for changing
that), otherwise it would make sense to discuss whether the git branch
shoud be part of the autosave file name.
#+begin_src emacs-lisp
  :init
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src

**** History
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (savehist-mode))
#+end_src

*** Backups

These is my configuration for backups. The directory itself is set by
no-littering.

#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq backup-by-copying t)
    (setq delete-old-versions t)
    (setq kept-new-versions 6)
    (setq kept-old-versions 2)
    (setq version-control t))
#+end_src

*** Destop Save

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :init
    (setq desktop-save t)
    (desktop-save-mode 1))
#+END_SRC
** Native Compilation

#+begin_src emacs-lisp
  (use-package emacs
    :init
    (when (boundp 'native-comp-eln-load-path)
      (add-to-list 'native-comp-eln-load-path (neo/litter-directory "eln" emacs-version)))
    (setq native-comp-async-report-warnings-errors 'silent))
#+end_src

  This is for native compilation. Should probably go in
  ~early-init.org~ once we have it. After I figure out what actually
  goes inside ~early-init.el~, maybe it is strictly for before-gui
  things.
  
#+begin_src emacs-lisp
    (if (and (fboundp 'native-comp-available-p)
             (native-comp-available-p))
        (progn
          (message "Native compilation is available")
          (setq comp-deferred-compilation t)
          (setq package-native-compile t)
          (setq native-comp-async-query-on-exit t)
          (setq native-comp-async-jobs-number 0) ; use half of the cores
          (setq native-comp-async-report-warnings-errors nil)
          (setq comp-async-report-warnings-errors nil))
      (message "Native complation is *not* available"))
#+end_src

** Secrets
** Misc

* Completion

#+BEGIN_SRC emacs-lisp
(use-package ivy)
#+END_SRC

#+begin_src emacs-lisp
  (use-package ivy-rich
:config
  (setq ivy-rich--original-display-transformers-list nil)  ;; needs to be set otherwise (ivy-rich-set-display-transformer) does not get called
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer)
  (setq-default ivy-rich-path-style 'abbrev
                ivy-virtual-abbreviate 'full
                ivy-rich-switch-buffer-align-virtual-buffer t)
  :after all-the-icons-ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src

#+begin_src emacs-lisp
  (use-package counsel
    :config
    (ivy-mode 1)
    :bind
    ("<f2> f" . 'counsel-describe-function)
    ("<f2> v" . 'counsel-describe-variable)
    ("<f2> o" . 'counsel-describe-symbol)
    ("<f2> l" . 'counsel-find-library)
    ("<f2> u" . 'counsel-unicode-char)
    )
  
#+end_src

#+begin_src emacs-list
(use-package all-the-icons-ivy-rich
  :after ivy
:config
(setq all-the-icons-ivy-rich-color-icon t)
(setq all-the-icons-ivy-rich-icon-size 1.0)
(setq all-the-icons-ivy-rich-project t)
  :init (all-the-icons-ivy-rich-mode 1))
#+end_src



#+begin_src emacs-lisp
(use-package prescient)
#+end_src

#+begin_src emacs-lisp
  (use-package ivy-prescient
  :after counsel
  :config
  (ivy-prescient-mode 1)
  (prescient-persist-mode 1)
  )
#+end_src

#+begin_src emacs-lisp
  (use-package company
    :bind (:map company-active-map
	   ("TAB" . company-complexivte-common-or-cycle)
	   ("<tab>" . company-complete-common-or-cycle)
	   ("<S-Tab>" . company-select-previous)
	   ("<backtab>" . company-select-previous)
	   ("C-n" . company-select-next)
	   ("C-p" . company-select-previous))
    :hook (after-init . global-company-mode)
    :custom
    (company-require-match 'never)
    (company-minimum-prefix-length 2)
    (company-tooltip-align-annotations t)
    (company-frontends '(company-pseudo-tooltip-unless-just-one-frontend
			 company-preview-frontend
			 company-echo-metadata-frontend))
    (company-backends '(company-capf company-files))
    (company-tooltip-minimum-width 30)
    (company-tooltip-maximum-width 60))
#+end_src

#+begin_src emacs-lisp
(use-package company-prescient
:after company
:config
(company-prescient-mode 1))
#+end_src

* User Interface
** Appearance
*** Themes
*** Modeline
*** Icons
*** Eyecandies
** Keybindings
*** Memory Aids
*** Global Keybindings

* Movement

* Undo

* Software Development

** Version Control
** Linters
** Languages
*** Emacs Lisp
*** Python
*** C++
*** Haskell
*** Shell


* Applications
** Org Mode
** Dashboard
** Calculator
** Calendar
** FIle Browser
** Shell

* Fun

* Unclassified Packages
